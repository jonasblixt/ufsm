/* Autogenerated with uFSM */
#ifndef UFSM_MODEL_NAME
#define UFSM_MODEL_NAME

#define UFSM_OK 0
#define UFSM_BAD_ARGUMENT 1
#define UFSM_SIGNAL_QUEUE_FULL 2

/* Events */
#define UFSM_RESET 0
#define e2 10
#define e1 11
#define e3 12
#define e4 13
#define e5 14
#define e6 15
#define e7 16

/* Signals */
#define s1 10

/* Guard prototypes */

/* Action prototypes */
void eA(void *user);
void xA(void *user);
void eC1(void *user);
void xC1(void *user);
void eC11(void *user);
void xC11(void *user);
void eC12(void *user);
void xC12(void *user);
void eB(void *user);
void xB(void *user);
void eC2(void *user);
void xC2(void *user);
void eD2(void *user);
void xD2(void *user);
void eD1(void *user);
void xD1(void *user);
void eD11(void *user);
void xD11(void *user);
void eD12(void *user);
void xD12(void *user);
void eE1(void *user);
void xE1(void *user);
void eE11(void *user);
void xE11(void *user);
void eE12(void *user);
void xE12(void *user);
void o2(void *user);
void o1(void *user);

struct ufsm_machine {
    unsigned int csv[7];
    unsigned int wsv[7];
    unsigned int signal[16];
    unsigned int head;
    unsigned int tail;
    void *user;
};

int ufsm_process(struct ufsm_machine *m, unsigned int event);

#endif  // UFSM_MODEL_NAME
